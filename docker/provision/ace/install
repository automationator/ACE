#!/usr/bin/env bash
#

RESET=""
while getopts "r" opt
do
    case ${opt} in
        r)
            RESET="Y"
            ;;
        *)
            echo "invalid command line option ${opt}"
            exit 1
            ;;
    esac
done

function fail() {
    echo "installation failed: $1"
    exit 1
}

cd $SAQ_HOME || { echo "cannot cd to $SAQ_HOME"; exit 1; }

for d in \
    data \
    etc/snort \
    work 
do
    if [ ! -d "$d" ]
    then
        echo "creating directory $d"
        mkdir -p "$d" || fail "cannot create directory $d"
    fi

    chown $SAQ_USER:$SAQ_GROUP "$d"
done

if grep SAQ_ENC $SAQ_HOME/load_local_environment > /dev/null 2>&1
then
	echo 'export SAQ_ENC=ace'  >> $SAQ_HOME/load_local_environment
fi

if [ ! -e etc/brotex.whitelist -o -n "$RESET" ]
then
    cp -a etc/brotex.whitelist.sample etc/brotex.whitelist || fail "unable to configure brotex.whitelist"
fi

if [ ! -e etc/startup -o -n "$RESET" ]
then
    cp -a etc/startup.example etc/startup || fail "unable to configure startup"
fi

if [ ! -e etc/remote_assignments.yar -o -n "$RESET" ]
then
    cp etc/remote_assignments.example.yar etc/remote_assignments.yar
fi

if [ ! -e etc/blacklist.yar -o -n "$RESET" ]
then
    cp etc/blacklist.example.yar etc/blacklist.yar
fi

if [ ! -e etc/amc_mda.ini -o -n "$RESET" ]
then
    cp etc/amc_mda.example.ini etc/amc_mda.ini
fi

if [ ! -e etc/amc_client.ini -o -n "$RESET" ]
then
    cp etc/amc_client.example.ini etc/amc_client.ini
fi

#echo "generating random secret key for flask"
#tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 > .gui_secret_key.sed
#sed -i -e 's;^;s/ACE_SECRET_KEY/;' -e 's;$;/g;' .gui_secret_key.sed
#sed -i -f .gui_secret_key.sed etc/saq.ini
#rm .gui_secret_key.sed

# create various directories and files
# XXX clean this up
for path in etc/site_tags.csv etc/ssdeep_hashes
do
	if [ ! -e "${path}" ]; then touch "${path}"; fi
done

if [ ! -e etc/organization.json -o -n "$RESET" ]; then echo '{}' > etc/organization.json; fi
if [ ! -e etc/local_networks.csv -o -n "$RESET" ]; then echo 'Indicator,Indicator_Type' > etc/local_networks.csv; fi

#if [ ! -s /opt/signatures ]
#then
    #ln -s /opt/signatures /opt/ace/etc/yara
#fi

if [ ! -e etc/saq.ini -o -n "$RESET" ]
then
    if [ "$(hostname)" == "ace-dev" ]
    then
        cat > etc/saq.ini <<EOF
[config]
docker_default = etc/saq.docker-dev.ini
EOF
    else
        cat > etc/saq.ini <<EOF
[config]
docker_default = etc/saq.docker.ini
EOF
    fi
fi

cp etc/saq.docker.unittest.ini etc/saq.unittest.ini

if [ ! -e etc/mysql_defaults -o -n "$RESET" ]; then cp docker/provision/ace/etc/mysql_defaults etc/; fi
if [ ! -e etc/mysql_defaults.root -o -n "$RESET" ]; then cp docker/provision/ace/etc/mysql_defaults.root etc/; fi
if [ ! -e etc/saq.docker.passwords.ini -o -n "$RESET" ]; then cp docker/provision/ace/etc/saq.docker.passwords.ini etc/; fi

for l in api apache
do
	if [ ! -e etc/$l\_logging.ini -o -n "$RESET" ]
	then
		cp -a etc/$l\_logging.example.ini etc/$l\_logging.ini || fail "unable to copy logging config for $l"
	fi
done

#if ace enc test ace > /dev/null 2>&1
#then
    #ace enc set -p ace
#fi

if [ ! -e /home/ace/.vimrc -o -n "$RESET" ]; then cp etc/vimrc /home/ace/.vimrc; fi
if [ ! -e /home/ace/.screenrc -o -n "$RESET" ]; then cp etc/screenrc /home/ace/.screenrc; fi
if [ ! -e /home/ace/.vscode-server/extensions ]; then mkdir -p /home/ace/.vscode-server/extensions; fi
if [ ! -e /home/ace/.vscode-server/extensionsCache ]; then mkdir -p /home/ace/.vscode-server/extensionsCache; fi

chown -R ace:ace /home/ace

docker/provision/ace/install_ssl_certs.sh
